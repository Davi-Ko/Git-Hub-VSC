#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClient.h>

//Wifi generated by the ESP-01
const char* ssidAP = "Relay_1";
const char* passwordAP = "abc12345";

//IP of this relay
IPAddress local_ip(192, 168, 4, 2);
IPAddress gateway(192, 168, 4, 1);
IPAddress subnet(255, 255, 255, 0); 

//Configuration of the Wifi from the other ESP-01
const char* ssidClient = "Relay_2";
const char* passwordClient = "abc12345";
const char* serverIP = "192.168.4.3";

//Creating the WebServer
ESP8266WebServer server(80);
WiFiClient wifiClient;
HTTPClient http;

//Defining the pin of the ESP-01 that will command the relay
const int relayPin = 0;

//Control variables
bool relayState = false; // false = OFF, true = ON
unsigned long lastSyncTime = 0;
const unsigned long syncInterval = 5000; // Sync every 5 seconds
bool isConnectedToPeer = false;

//Function to sync state with other relay
void syncWithPeer(String command) {
    if (WiFi.status() == WL_CONNECTED) {
        http.begin(wifiClient, "http://" + String(serverIP) + "/" + command + "_SYNC");
        http.setTimeout(2000);
        int httpCode = http.GET();
        
        if (httpCode > 0) {
            isConnectedToPeer = true;
            Serial.println("Sync successful with Relay 2: " + command);
        } else {
            isConnectedToPeer = false;
            Serial.println("Sync failed with Relay 2");
        }
        http.end();
    }
}

//Function to check peer status
void checkPeerStatus() {
    if (WiFi.status() == WL_CONNECTED) {
        http.begin(wifiClient, "http://" + String(serverIP) + "/status");
        http.setTimeout(2000);
        int httpCode = http.GET();
        
        if (httpCode == 200) {
            String payload = http.getString();
            isConnectedToPeer = true;
            
            // Check if peer state is different and sync if needed
            if (payload.indexOf("ON") != -1 && !relayState) {
                relayState = true;
                digitalWrite(relayPin, LOW);
                Serial.println("Synced ON from Relay 2");
            } else if (payload.indexOf("OFF") != -1 && relayState) {
                relayState = false;
                digitalWrite(relayPin, HIGH);
                Serial.println("Synced OFF from Relay 2");
            }
        } else {
            isConnectedToPeer = false;
        }
        http.end();
    }
}

//Relay Configuration
void setup(){
    Serial.begin(115200);
    delay(1000);

    pinMode(relayPin, OUTPUT);
    digitalWrite(relayPin, HIGH); // Start OFF
    relayState = false;

    //Configures this relay as Access Point
    Serial.println("Setting up Access Point...");
    WiFi.softAP(ssidAP, passwordAP);
    WiFi.softAPConfig(local_ip, gateway, subnet);
    
    Serial.print("Relay 1 AP IP: ");
    Serial.println(WiFi.softAPIP());

    //Makes this relay to connect to the other one as a Client
    Serial.print("Connecting to Relay 2...");
    WiFi.begin(ssidClient, passwordClient);
    
    int attempts = 0;
    while (WiFi.status() != WL_CONNECTED && attempts < 20){
        delay(500);
        Serial.print(".");
        attempts++;
    }
    
    if (WiFi.status() == WL_CONNECTED) {
        Serial.println("\nConnection Success!");
        Serial.print("Connected to Relay 2 with IP: ");
        Serial.println(WiFi.localIP());
        isConnectedToPeer = true;
    } else {
        Serial.println("\nFailed to connect to Relay 2. Operating in standalone mode.");
        isConnectedToPeer = false;
    }

    //Configuration of the API requisitions
    server.on("/", HTTP_GET, [](){
        String status = relayState ? "ON" : "OFF";
        String peerStatus = isConnectedToPeer ? "Connected" : "Disconnected";
        String response = "Relay 1 Status: " + status + "\nPeer Connection: " + peerStatus;
        server.send(200, "text/plain", response);
    });

    server.on("/ON", HTTP_GET, [](){
        relayState = true;
        digitalWrite(relayPin, LOW);
        server.send(200, "text/plain", "Relay 1 power: ON");
        
        // Sync with peer
        syncWithPeer("ON");
    });
    
    server.on("/OFF", HTTP_GET, [](){
        relayState = false;
        digitalWrite(relayPin, HIGH);
        server.send(200, "text/plain", "Relay 1 power: OFF");
        
        // Sync with peer
        syncWithPeer("OFF");
    });

    // Sync endpoints (called by peer)
    server.on("/ON_SYNC", HTTP_GET, [](){
        relayState = true;
        digitalWrite(relayPin, LOW);
        server.send(200, "text/plain", "Relay 1 synced: ON");
        Serial.println("Received sync command: ON");
    });
    
    server.on("/OFF_SYNC", HTTP_GET, [](){
        relayState = false;
        digitalWrite(relayPin, HIGH);
        server.send(200, "text/plain", "Relay 1 synced: OFF");
        Serial.println("Received sync command: OFF");
    });

    server.on("/status", HTTP_GET, [](){
        String status = relayState ? "ON" : "OFF";
        server.send(200, "text/plain", "Relay Status: " + status);
    });

    server.begin();
    Serial.println("Web server started");
}

//Main loop
void loop() {
    server.handleClient();

    // Check WiFi connection
    if (WiFi.status() != WL_CONNECTED) {
        if (isConnectedToPeer) {
            Serial.println("Lost connection to Relay 2! Trying to reconnect...");
            isConnectedToPeer = false;
        }
        
        static unsigned long lastReconnectAttempt = 0;
        if (millis() - lastReconnectAttempt > 10000) { // Try every 10 seconds
            WiFi.begin(ssidClient, passwordClient);
            lastReconnectAttempt = millis();
        }
    } else if (!isConnectedToPeer) {
        isConnectedToPeer = true;
        Serial.println("Reconnected to Relay 2!");
    }

    // Periodic sync check
    if (millis() - lastSyncTime > syncInterval && isConnectedToPeer) {
        checkPeerStatus();
        lastSyncTime = millis();
    }
    
    yield(); // Allow ESP8266 to handle background tasks
}